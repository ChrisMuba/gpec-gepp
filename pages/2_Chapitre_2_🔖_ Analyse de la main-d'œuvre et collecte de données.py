


import streamlit as st

st.sidebar.success("Cliquez sur un :blue[chapitre] ou un :blue[quiz]")

st.markdown("# Chapitre 2")
st.sidebar.markdown("# Chapitre 2")

st.title("Analyse de la main-d'≈ìuvre et collecte de donn√©es")

st.markdown("Une planification efficace des effectifs strat√©giques de la main-d'≈ìuvre commence par une **analyse compl√®te des effectifs actuels** de votre organisation. Cette analyse implique la collecte et l'√©valuation de donn√©es pour mieux comprendre les comp√©tences, les performances et le potentiel de vos employ√©s.") 

st.markdown("Il s'agit d'une **√©tape critique pour comprendre les forces, les faiblesses et les domaines de votre organisation qui doivent √™tre am√©lior√©s**.") 

st.markdown("Ce chapitre d√©crit les principaux √©l√©ments de l'analyse des effectifs et de la collecte de donn√©es.") 

st.markdown("")

if st.button("Cliquez pour acceder au Chap.2 - **A/ Collecte et analyse des donn√©es de la main-d'≈ìuvre**"):
    
    st.subheader("üìàChap.2-A/ Collecte et analyse des donn√©esüìâ")
    
    st.markdown("**Les donn√©es constituent le fondement de l'analyse des effectifs**. Les RH doivent collecter et analyser divers types de donn√©es pour avoir une **vue d'ensemble de la main-d'≈ìuvre**.") 
    
    st.markdown("Ces donn√©es peuvent inclure:") 
    
    st.markdown("- **Information d√©mographique** : Donn√©es sur l'√¢ge, le genre et d'autres facteurs d√©mographiques qui peuvent fournir des informations sur la composition de la main-d'≈ìuvre.") 
    
    st.markdown("- **Comp√©tences et qualifications des employ√©s** : Informations sur la formation, les certifications et les qualifications des employ√©s, qui aident √† √©valuer les niveaux et le potentiel de comp√©tences.")

    st.markdown("- **M√©triques de performance** : Donn√©es sur les performances individuelles et en √©quipe, y compris les principaux indicateurs de performance (KPI) et les param√®tres de mesure pertinents pour chaque r√¥le.")

    st.markdown("- **Donn√©es sur le turnover et la r√©tention des talents** : informations sur les taux de rotation du personnel, les raisons de d√©part et les strat√©gies de fid√©lisation.")

    st.markdown("- **Donn√©es sur l'engagement des employ√©s** : Enqu√™tes et retour d'information qui √©valuent l'engagement, la satisfaction et la motivation des salari√©s.")

    st.markdown("- **R√©mun√©ration et avantages** : Donn√©es relatives aux salaires et avantages sociaux qui peuvent aider √† d√©terminer si votre organisation est comp√©titive sur le march√© du travail.")

    st.markdown("")
    
    st.markdown("Une fois les donn√©es collect√©es, il faut les analyser pour identifier les mod√®les, les tendances et les domaines qui n√©cessitent une attention particuli√®re.") 
    
    st.markdown("Des outils analytiques, des logiciels et des m√©thodes statistiques peuvent √™tre utilis√©s pour donner un sens aux donn√©es et tirer des conclusions significatives.")

    st.markdown("Pour en apprendre plus sur l'**analyse de donn√©es RH**, vous pouvez suivre notre :blue[**Cours de Statistiques appliqu√©es aux Ressources Humaines**] : ") 

    st.markdown("en cliquant ici ‚¨áÔ∏è")
                
    st.link_button("Cours de Statistiques appliqu√©es aux RH", "https://cours-stats-rh.streamlit.app/")

    st.markdown("")

    st.markdown(":blue[**Ou continuer vers la suite du chapitre 2**]")

    st.markdown("en cliquant ici ‚¨áÔ∏è")


        
# Add the "made with ‚ù§Ô∏è by ..." text in the sidebar
with st.sidebar:
    st.write("Made with ‚ù§Ô∏è by Chris MUBA")
with st.sidebar:
        st.image('GIF/take_notes.gif')

if st.button("Continuer vers la suite du Chap.2 - **B/ D√©termination des principaux indicateurs de performance**"):
    
    st.subheader("üìàChap.2-B/ D√©termination des principaux indicateurs de performanceüìâ")
    
    st.markdown("Les mesures de variabilit√© sont utilis√©es pour d√©crire la dispersion (propagation) des points de donn√©es dans un ensemble de donn√©es.") 
    st.markdown("**Il existe plusieurs mesures principales de la variabilit√©** :")
    
    st.markdown("- **Plage** : La plage (gamme, √©tendue) est la mesure de variabilit√© la plus simple, elle repr√©sente la diff√©rence entre les valeurs maximales et minimales dans un ensemble de donn√©es. Elle fournit une estimation approximative de la variabilit√©, mais est sensible aux valeurs aberrantes.")

    st.markdown("**Math√©matiquement, on peut l'exprimer comme suit :**")

    st.subheader("Plage = Valeur maximale - Valeur minimale")


    st.markdown("")
    

    st.markdown("")

    
    st.markdown("**üèÄApplication 5**")

    st.write("""Supposons que nous disposions d'un √©chantillon de donn√©es sur l'√¢ge des employ√©s d'une entreprise. 
    
    √¢ges = [22, 25, 30, 35, 40, 45, 50, 55, 60 et 65 ans] 
    
    üí°La plage de cet √©chantillon de donn√©es est : 65 - 22 = 43 ans.
""")


    st.markdown("")


    st.markdown("Bien que cette plage puisse donner un aper√ßu de la r√©partition des √¢ges au sein de l'entreprise, elle pr√©sente certaines limites :")

    st.markdown("1. Elle ne tient pas compte de la distance entre les points de donn√©es cons√©cutifs.")
    st.markdown("2. Elle peut √™tre affect√©e par des valeurs extr√™mes ou des valeurs aberrantes.")
    

    st.markdown("Pour mieux **visualiser et comprendre** la r√©partition des √¢ges dans notre √©chantillon de donn√©es, nous pouvons utiliser d'autres repr√©sentations en plus de la plage. Certaines techniques de visualisation populaires incluent : Histogramme et Box plot.") 
    
    
    st.markdown("")


     # Import necessary libraries
    import streamlit as st
    import plotly.express as px

# Data: Salaries in dollars
    √¢ges = [22, 25, 30, 35, 40, 45, 50, 55, 60, 65]

# Create a box plot using Plotly Express
    fig = px.box(x=√¢ges, labels={'x': '√¢ge des employ√©s (ans)'}, title="Box Plot de l√¢ge des employ√©s de l'entreprise")

# Display the plot in the Streamlit app
    st.plotly_chart(fig)

# Explanation
    with st.expander("üîÆInterpretation du box plot de l√¢ge des employ√©s de l'entreprise"):
        st.write("""
    Ce **box plot** affiche la r√©partition des √¢ges dans l'√©chantillon de donn√©es, l'axe horizontal repr√©sentant les diff√©rentes tranches d'√¢ge.

    L'intervalle interquartile **IQR** (repr√©sent√© par la boite) nous montre que la majorit√© des employ√©s (50 %) ont entre 30 et 55 ans.")
    
    L‚Äô√¢ge m√©dian, (repr√©sent√© par la ligne verticale dans la boite) est de 42.5 ans, ce qui signifie que la moiti√© des employ√©s de l'√©chantillon de donn√©es a plus de 42.5 ans et l'autre moiti√© moins : il s'agit d'une information utile √† conna√Ætre, car elle peut aider √† √©clairer les politiques et les pratiques li√©es au d√©veloppement et √† la r√©tention des employ√©s.

    Ce **box plot** montre √©galement les quartiles inf√©rieur (Q1 = 30 ans) et sup√©rieur (Q3 = 55 ans), qui sont repr√©sent√©s respectivement par les c√¥t√©s gauche et droit de la bo√Æte. Les valeurs de **Q1 et Q3** signifient respectivement que 25 % des employ√©s ont moins de 30 ans et 25 % plus de 55 ans.
    """)


    st.markdown("")


    st.markdown("")
    
    
    st.markdown("- **Variance** : La variance est une mesure de variabilit√© plus sophistiqu√©e que la plage. C'est une mesure de **comment** les donn√©es d'un ensemble diff√®rent de la moyenne de l'ensemble.") 

    # Display the theoretical formula for calculating the variance
    st.subheader("Formule th√©orique de la Variance")
    st.latex(r'Variance (\sigma^2) = \frac{\sum_{i=1}^{n}(X_i - \mu)^2}{N}')

    st.markdown("O√π :")

    st.markdown("**œÉ¬≤** repr√©sente la variance")

    st.markdown("**X·µ¢** repr√©sente chaque point de donn√©es individuel")

    st.markdown("**Œº** repr√©sente la moyenne de l'√©chantillon de donn√©es")

    st.markdown("**N** est le nombre total de points de donn√©es")


    st.markdown("")


    st.markdown("**üèÄApplication 6**")
    st.markdown("‚ùóPour la suite nous pourrions exprimer nos **scores de satisfaction** en ESI (employee satisfaction index) mais cela n'a aucun int√©r√™t pour illustrer le calcul de la variance, donc nous travaillerons avec les donn√©es brutes.")

    st.markdown("Supposons que vous ayez men√© une enqu√™te sur l'engagement des employ√©s et que vous ayez collect√© des scores de satisfaction sur une √©chelle de 1 √† 10, o√π 1 repr√©sente tr√®s insatisfait et 10 repr√©sente tr√®s satisfait. Vous avez interrog√© 10 employ√©s.")
    

    import streamlit as st
    import pandas as pd
    import plotly.express as px

# Create a high variance dataset
    data = {
    'Employ√©': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Score de satisfaction': [1, 3, 4, 7, 9, 2, 10, 5, 8, 6]
    }

    df = pd.DataFrame(data)

    # Display the dataset
    st.write("Voici leurs scores de satisfaction :")
    st.write(df)

    st.markdown("")
    

    st.markdown("Maintenant, calculons la variance pour cet ensemble de donn√©es √©tape par √©tape :")


    st.markdown("")


    st.markdown("√âtape 1 : **Calculons la Moyenne (**Œº**) des scores de satisfaction**")

    # Display the Mean
    st.latex(r'\text{Moyenne (Œº)} = \frac{\sum_{i=1}^{n}X_i}{n} = \frac{1+3+4+7+9+2+10+5+8+6‚Äã}{10} = \frac{55‚Äã}{10} = 5.5')


    st.markdown("")

    

    st.markdown("√âtape 2 : **Calculons les carr√©s des diff√©rences entre chaque point de donn√©es (X·µ¢) et la moyenne (Œº) :**")


    st.write("""
    - Pour l'employ√© 1 : (1 ‚àí 5.5)¬≤ = 20.25")  
    - Pour l'employ√© 2 : (3 ‚àí 5.5)¬≤ = 6.25 
    - Pour l'employ√© 3 : (4 ‚àí 5.5)¬≤ = 2.25
    - Pour l'employ√© 4 : (7 ‚àí 5.5)¬≤ = 2.25
    - Pour l'employ√© 5 : (9 ‚àí 5.5)¬≤ = 12.25  
    - Pour l'employ√© 6 : (2 ‚àí 5.5)¬≤ = 12.25 
    - Pour l'employ√© 7 : (10 ‚àí 5.5)¬≤ = 20.25
    - Pour l'employ√© 8 : (5 ‚àí 5.5)¬≤ = 0.25
    - Pour l'employ√© 9 : (8 ‚àí5 .5)¬≤ = 6.25
    - Pour l'employ√© 10 : ( 6‚àí 5.5)¬≤ = 0.25
    """)
    

    st.markdown("")

    
    st.markdown("√âtape 3 : **Additionnons tous les carr√©s des diff√©rences**")
    
    # Display
    st.latex(r'{\sum_{i=1}^{n}(X_i - \mu)^2} = {20.25+6.25+2.25+2.25+12.25+12.25+20.25+0.25+6.25+0.25} = {82.25}')


    st.markdown("")


    st.markdown("√âtape 4 : **Calculons la variance (œÉ¬≤)**")
    
    # Display
    st.latex(r'Variance (\sigma^2) = \frac{\sum_{i=1}^{n}(X_i - \mu)^2}{N} = \frac{82.25‚Äã}{10} = 8.225')
    
# Explanation
    with st.expander("üîÆInterpretation de la variance"):
        st.write("""
    En statistiques, il n'existe pas de valeurs seuil fixes et universellement applicables pour d√©terminer ce qui constitue une variance faible ou √©lev√©e, car cela d√©pend du contexte des donn√©es et des objectifs sp√©cifiques. 
    
    **Cependant, il existe quelques lignes directrices et approches g√©n√©rales que nous pouvons utiliser pour prendre cette d√©cision :** 
    
    1. Comparez la valeur de la variance aux variances d'ensembles de donn√©es RH similaires des ann√©es ant√©rieures, ou au sein d'organisation ou de services similaires.
    
    2. Utiliser des tests statistiques pour d√©terminer si la variance est statistiquement significative. Par exemple, on peut effectuer un test d'hypoth√®se pour comparer la variance de notre ensemble de donn√©es √† une valeur hypoth√©tique ou √† la variance d'un autre ensemble de donn√©es.
    
    3. Visualisez les donn√©es √† l'aide d'un histogramme, d'un box plot ou d'autres m√©thodes graphiques : un ensemble de donn√©es avec une variance √©lev√©e affichera g√©n√©ralement une plus grande r√©partition des points de donn√©es, tandis qu'un ensemble de donn√©es √† faible variance aura des points de donn√©es regroup√©s plus pr√®s les uns des autres.
""")
    

    st.markdown("")
    

    st.markdown("")

    
    st.markdown("- **√âcart type** : L'√©cart type est une mesure de la dispersion des valeurs des donn√©es par rapport √† la moyenne de l'ensemble de donn√©es. **C'est la racine carr√©e de la variance**. Il s'agit de la mesure de variabilit√© la plus couramment utilis√©e et fournit une mesure de la dispersion dans les m√™mes unit√©s que l'ensemble de donn√©es d'origine.")

    st.markdown("**Math√©matiquement, on peut l'exprimer comme suit :**")

    st.subheader("√âcart type (œÉ) = ‚àöVariance")


    st.markdown("")


    st.markdown("**üèÄApplication 7**")
    st.markdown("Supposons qu'une entreprise souhaite analyser les scores d'√©valuation de performance de ses employ√©s.")
    

    import streamlit as st
    import pandas as pd
    import plotly.express as px

# Create a high variance dataset
    data = {
    'Equipe A': [80, 85, 90, 95, 100],
    'Equipe B': [60, 70, 90, 110, 120]
    }

    df = pd.DataFrame(data)

    # Display the dataset
    st.markdown("Les scores de performance de deux √©quipes, l‚Äô√©quipe A et l‚Äô√©quipe B, sont les suivants :")
    st.write(df)
    

    st.markdown("")
    

    st.write("""Tout d‚Äôabord, nous calculons la **plage** pour les deux √©quipes : 
    
    √âquipe A : Plage = 100 - 80 = 20

    √âquipe B : Plage = 120 - 60 = 60
    
    üí°La plage indique qu‚Äôil existe une plus grande r√©partition des scores 
    d'√©valuation de performance pour l‚Äô√©quipe B par rapport √† l‚Äô√©quipe A.
""")

    
    st.markdown("")


    st.markdown("")
    

    st.write("""Calculons la **moyenne** pour les deux √©quipes : 
    
    √âquipe A : Moyenne = (80 + 85 + 90 + 95 + 100) / 5 = 450 / 5 = 90

    √âquipe B : Moyenne = (60 + 70 + 90 + 110 + 120) / 5 = 450 / 5 = 90
    
""")

    
    st.markdown("")
    

    st.write("""Puis, nous calculons la **variance** pour les deux √©quipes : 
    
    √âquipe A :

    Variance = [(80 - 90)¬≤ + (85 - 90)¬≤ + (90 - 90)¬≤ + (95 - 90)¬≤ + (100 - 90)¬≤] / 5
    Variance = [100 + 25 + 0 + 25 + 100] / 5
    Variance = 250 / 5
    Variance = 50

    √âquipe B :

    Variance = [(60 - 90)¬≤ + (70 - 90)¬≤ + (90 - 90)¬≤ + (110 - 90)¬≤ + (120 - 90)¬≤] / 5
    Variance = [900 + 400 + 0 + 400 + 900] / 5
    Variance = 2600 / 5
    Variance = 520
    
""")


    st.markdown("")
    

    st.write("""Enfin, nous calculons **l‚Äô√©cart type** pour les deux √©quipes : 
    
    √âquipe A : √âcart type ‚âà ‚àö50 ‚âà 7,07

    √âquipe B : √âcart type ‚âà ‚àö520 ‚âà 22.80
    
""")


    st.markdown("")


# Explanation
    with st.expander("üîÆInterpretation des r√©sultats"):
        st.write("""
   La variance et l'√©cart type montrent que les scores d'√©valuation de performance de l'√©quipe B sont plus dispers√©s que ceux de l'√©quipe A.

   Ces informations peuvent aider √† identifier des probl√®mes potentiels au sein de l'√©quipe B et √† mettre en ≈ìuvre des actions correctives cibl√©es pour am√©liorer les performances de certains employ√©s.
   """)


    st.markdown("")


if st.button("Continuer vers la suite du Chap.2 - **C/ Techniques graphiques**"):
    
    st.subheader("üìàChap.2-C/ Techniques graphiquesüìâ")
    
    st.markdown("Les techniques graphiques sont un moyen puissant de visualiser les donn√©es et de les rendre plus faciles √† comprendre.") 
    st.markdown("Elles peuvent √™tre utilis√©es pour communiquer aux parties prenantes des informations complexes de mani√®re claire et concise ; et pour identifier des mod√®les et des tendances qui peuvent ne pas ressortir des donn√©es brutes.")
    st.markdown("Les techniques graphiques √† utiliser vont d√©pendre du type de donn√©es : **qualitative** ou **quantitative**.") 


    st.markdown("")


    st.subheader("Donn√©es qualitatives")

     
    st.markdown("Les types de graphiques courants pour analyser des data RH **qualitatives** incluent :") 
    

    st.markdown("")
    
    
    st.markdown("- **Diagramme circulaire** : Un diagramme circulaire (Camembert) est un graphique qui repr√©sente des **donn√©es cat√©gorielles** sous forme de tranches du diagramme. Chaque tranche repr√©sente une cat√©gorie et la taille de la tranche est proportionnelle au pourcentage du total.")

    st.markdown("**Cas d‚Äôusage** des diagrammes circulaires : Ils peuvent √™tre utilis√©s pour afficher la r√©partition des employ√©s entre diff√©rents services d'une entreprise, fonctions professionnelles, cat√©gories d√©mographiques, etc...")


    st.markdown("")
    

    st.markdown("**üèÄApplication 8**")
    st.markdown("Une √©quipe RH souhaite analyser la r√©partition des employ√©s dans chaque service. Les donn√©es sont pr√©sent√©es dans le diagramme circulaire suivant :")


    import pandas as pd
    
# sample dataset:
    data = {
    'Service': ['Marketing', 'Finance', 'IT', 'RH'],
    'Nombre d\'employ√©s': [100, 75, 50, 25]
    }

    df = pd.DataFrame(data)

    import streamlit as st
    import plotly.express as px

# Load the HR data
    data = {
    'Service': ['Marketing', 'Finance', 'IT', 'RH'],
    'Nombre d\'employ√©s': [100, 75, 50, 25]
    }

    df = pd.DataFrame(data)

# Create a Pie Chart using Plotly
    fig = px.pie(df, values='Nombre d\'employ√©s', names='Service', title='R√©partition des employ√©s par service')
    st.plotly_chart(fig)

    # Explanation
    with st.expander("üîÆInterpretation du diagramme circulaire"):
        st.write("""
    Le diagramme circulaire montre la r√©partition des employ√©s dans les diff√©rents services de l'entreprise. Chaque tranche du diagramme circulaire correspond √† un service, tel que Marketing, Finance, IT & RH.
    
    La taille de chaque tranche du diagramme est proportionnelle au pourcentage du nombre total d'employ√©s de ce service par rapport √† l'ensemble des salari√©s de tous les services.
    
    On observe enfin que le service Marketing compte la plus grande proportion d'employ√©s (40 %), suivi du service Finance (30 %), du service IT (20 %) et enfin du service RH (10 %).
    """)


    st.markdown("")


    st.markdown("")


    st.markdown("- **Graphique √† barres** : Un graphique √† barres est un graphique vertical ou horizontal qui affiche des **donn√©es cat√©gorielles**. Des barres sont utilis√©es pour montrer la fr√©quence ou l‚Äôampleur de chaque cat√©gorie.")

    st.markdown("**Cas d‚Äôusage** des graphiques √† barres : Ils peuvent √™tre utilis√©s pour comparer diverses mesures entre diff√©rents services, groupes d'employ√©s ou p√©riodes. Notamment taux d'absent√©isme / turnover par services, √©chelles salariales, notes d'√©valuations de performances, participation √† la formation. etc...")

    st.markdown("")
    

    st.markdown("**üèÄApplication 9**")
    st.markdown("Supposons qu'un contr√¥leur de gestion sociale souhaite analyser les taux d'absent√©isme du personnel dans diff√©rents services au cours de l'ann√©e √©coul√©e. Un graphique √† barres peut afficher le taux d'absent√©isme (axe des y) pour chaque service (axe des x) afin d'identifier les tendances et les probl√®mes potentiels.")


    import streamlit as st
    import plotly.express as px

# Load the HR data with colors for each department
    data = {
    'Service': ['RH', 'Finance', 'IT', 'Marketing', 'Ventes'],
    'Taux Absent√©isme (%)': [8.5, 5.2, 6.8, 9.3, 7.0],
    }

    df = pd.DataFrame(data)

# Define a color map with department names as keys and colors as values
    color_map = {
    'HR': '#1f77b4',
    'Finance': '#ff7f0e',
    'IT': '#2ca02c',
    'Marketing': '#d62728',
    'Ventes': '#9467bd'
    }

# Create a Bar Graph using Plotly with assigned colors and department names as legend
    fig = px.bar(df, x='Service', y='Taux Absent√©isme (%)', title='Taux d\'absent√©isme par service',
             color='Service', color_discrete_map=color_map)
    st.plotly_chart(fig)
    
# Explanation
    with st.expander("üîÆInterpretation du graphique √† barres"):
        st.write("""
    Le graphique √† barres repr√©sente les taux d'absent√©isme dans diff√©rents services d'une entreprise au cours de l'ann√©e √©coul√©e. Chaque barre du graphique correspond √† un service, tel que RH, Finance, IT, Marketing et Ventes.
    
    La hauteur de chaque barre repr√©sente le taux d'absent√©isme de ce service : nous pouvons voir que le service Marketing a le taux d'absent√©isme le plus √©lev√© (9.3 %), suivi par le service RH (8.5), Ventes (7 %), IT (6.8 %) et enfin Finance (5.2 %).
    """)


    st.markdown("")


    st.markdown("")


    st.subheader("Donn√©es quantitatives")


    st.markdown("Les types de graphiques courants pour analyser des data RH **quantitatives** incluent :") 


    st.markdown("- **Histogrammes** : Un histogramme est une repr√©sentation graphique de la distribution d'un ensemble de **donn√©es quantitatives**, o√π les donn√©es sont divis√©es en un ensemble d'intervalles et le nombre de points de donn√©es appartenant √† un intervalle est repr√©sent√© par la hauteur d'une barre.")

    st.markdown("**Cas d‚Äôusage** des histogrammes : Ils peuvent √™tre utilis√©s pour comprendre la distribution d'une seule variable, telle que les salaires des employ√©s, les ann√©es d'exp√©rience, etc...")


    st.markdown("")
    

    st.markdown("**üèÄApplication 10**")
    st.markdown("Imaginez que vous √™tes un responsable RH charg√© de comprendre la r√©partition des salaires au sein de votre entreprise. La plupart des employ√©s gagnent-ils des salaires similaires ou disposez-vous d‚Äôun large √©ventail d‚Äô√©chelles salariales ?") 
    st.markdown("Un histogramme peut vous aider √† r√©pondre √† ces questions et √† obtenir des informations pr√©cieuses en fournissant une image claire des √©chelles et fourchettes salariales les plus courantes parmi vos employ√©s.")


    import streamlit as st
    import numpy as np
    import plotly.express as px

# Generate random salary data for 100 employees (in thousands of dollars)
    np.random.seed(42)
    salaries = np.random.normal(50, 10, 100)

# Create a Plotly histogram figure with a custom legend label and no legend title
    fig = px.histogram(salaries, nbins=20, title='R√©partition des salaires dans notre entreprise')
    fig.update_xaxes(title_text='Salaire (en milliers d\'‚Ç¨)')
    fig.update_yaxes(title_text='Nombre d\'employ√©s')

# Remove the legend title
    fig.update_layout(legend_title_text='Salaire (‚Ç¨)')

# Displaying Chart
    st.plotly_chart(fig)

    # Explanation
    with st.expander("üîÆInterpretation de l'histogramme"):
        st.write("""
    Cet histogramme est une repr√©sentation graphique de la r√©partition des salaires entre les salari√©s de notre entreprise. Chaque barre de l'histogramme correspond √† une fourchette salariale sp√©cifique (en milliers d'‚Ç¨), et la hauteur de chaque barre indique le nombre d'employ√©s dans cette fourchette salariale.
    
    √âchelles salariales courantes : les barres les plus hautes de l'histogramme se situent dans les √©chelles salariales [45 k‚Ç¨ - 49,99 k‚Ç¨] et [50 k‚Ç¨ - 54,99 k‚Ç¨]. Cela sugg√®re que ces √©chelles salariales sont les plus courantes parmi nos employ√©s, avec respectivement 23 et 22 employ√©s.
    
    R√©partition des salaires : l'histogramme montre que les salaires sont r√©partis sur une plage de valeurs relativement uniforme sans √©carts ni regroupements significatifs.
    
    Asym√©trie : l'histogramme semble √™tre l√©g√®rement inclin√© vers la droite. Cela signifie qu'il y a relativement moins d'employ√©s dans les √©chelles salariales inf√©rieures ([20 k‚Ç¨ - 24,99 k‚Ç¨] √† [40 k‚Ç¨ - 44,99 k‚Ç¨]) et plus d'employ√©s dans les √©chelles salariales moyennes √† sup√©rieures ([45 k‚Ç¨ - 49,99 k‚Ç¨] √† [65 k‚Ç¨ - 69.99 k‚Ç¨].
    """)

    st.markdown("")


    st.markdown("")


    st.markdown("- **Bo√Ætes √† moustaches** : Une bo√Æte √† moustache est un diagramme utilis√© pour visualiser la r√©partition et l'asym√©trie des **donn√©es quantitatives**. Elles sont particuli√®rement utiles pour d√©tecter les valeurs aberrantes.")

    st.markdown("**Cas d‚Äôusage** des bo√Ætes √† moustaches : Elles peuvent √™tre utilis√©s pour comparer diff√©rentes distributions d'une m√™me **variable quantitative** (salaires, anciennet√©, etc...)")

    st.markdown("")
    

    st.markdown("**üèÄApplication 11**")
    st.markdown("Disons que nous analysons les salaires des employ√©s. Nous voulons voir comment les salaires sont r√©partis entre les diff√©rents services l'entreprise.")
    st.markdown("Nous pouvons cr√©er un box plot pour visualiser la r√©partition des salaires pour chaque service. Le box plot nous montrera le salaire m√©dian, l‚Äô√©cart interquartile et toutes les valeurs aberrantes.")


    import pandas as pd
    import numpy as np

# Create sample data
    np.random.seed(42)

# Simulate salaries for three departments: HR, Sales, and IT
    hr_salaries = np.random.normal(50000, 10000, 50)
    sales_salaries = np.random.normal(60000, 15000, 60)
    it_salaries = np.random.normal(65000, 12000, 45)

# Combine data into a DataFrame
    data = pd.DataFrame({
    'Service': ['RH'] * 50 + ['Ventes'] * 60 + ['IT'] * 45,
    'Salaire': np.concatenate([hr_salaries, sales_salaries, it_salaries])
    })

    import streamlit as st
    import plotly.express as px

# Create an interactive box plot using Plotly Express
    fig = px.box(data, x='Service', y='Salaire', title='R√©partition des salaires au sein des services RH, Ventes & IT')
    fig.update_xaxes(title_text='Service')
    fig.update_yaxes(title_text='Salaire (k‚Ç¨)')

# Show the plot in Streamlit
    st.plotly_chart(fig)

    # Explanation
    with st.expander("üîÆInterpretation des 3 box plot"):
        st.write("""
    La bo√Æte repr√©sente l'√©cart interquartile (IQR) des salaires au sein de chaque service. Les bords inf√©rieur (q1) et sup√©rieur (q3) de la bo√Æte correspondent respectivement aux 25e et 75e centiles. Cela nous indique o√π se situent 50% des salaires au sein de chaque service.
    
    La ligne √† l'int√©rieur de la bo√Æte repr√©sente le salaire m√©dian pour chaque service. C'est la valeur salariale qui s√©pare les 50 % inf√©rieurs des 50 % sup√©rieurs.
    
    Les moustaches s'√©tendent de la bo√Æte jusqu'aux valeurs minimales et maximales dans une plage de 1,5 fois l'IQR. Tous les points de donn√©es au-del√† des moustaches sont consid√©r√©s comme des valeurs aberrantes et sont affich√©s sous forme de points individuels.
    
    Comparaison des salaires : nous pouvons facilement comparer les r√©partitions salariales entre les 3 services RH, Ventes & IT. Par exemple, l'IT a le salaire m√©dian le plus √©lev√© (66.19 k‚Ç¨), suivi des Ventes (59.77 k‚Ç¨) et des RH (47.66 k‚Ç¨).
    
    Variabilit√© : La longueur de la bo√Æte et des moustaches peuvent nous donner une id√©e de la variabilit√© salariale au sein de chaque service : une bo√Æte ou des moustaches plus longues indiquent une plus grande variabilit√©.
    
    Valeurs aberrantes : le box plot du services Ventes nous aide √† identifier des salaires individuels qui se situent bien en dehors de l'√©chelle salariale typique. Ils sont rep√©sent√©s par 3 points individuels (20.70 k‚Ç¨, 30.19 k‚Ç¨ et 88.29 k‚Ç¨).
    """)


    st.markdown("")


    st.markdown("")


    st.markdown("- **Graphique lin√©aire** : Un graphique lin√©aire est un graphique qui affiche des **donn√©es quantitatives** au fil du temps. Il utilise des points connect√©s pour afficher les tendances et les mod√®les dans les donn√©es.")

    st.markdown("**Cas d‚Äôusage** des graphiques lin√©aires : Ils peuvent √™tre utilis√©s pour suivre l'√©volution des effectifs et de la masse salariale au fil du temps, pour visualiser l'absent√©isme sur plusieurs mois, pour suivre les mesures de performance au fil du temps, etc...")


    st.markdown("")
    

    st.markdown("**üèÄApplication 12**")
    st.markdown("Supposons que nous disposions de donn√©es sur le total des salaires mensuels pay√©s par l'entreprise au cours des trois derni√®res ann√©es (2020, 2021 et 2022). Nous pouvons utiliser un graphique lin√©aire comme outil de visualisation permettant de suivre l‚Äô√©volution des salaires mensuels sur plusieurs ann√©es.") 
    st.markdown("Cette visualisation va nous permettre d'identifier les tendances, la saisonnalit√© et les valeurs aberrantes potentielles, permettant ainsi de prendre des d√©cisions li√©es √† la planification et √† la budg√©tisation de la r√©mun√©ration, fond√©es sur des donn√©es.") 
   

    import pandas as pd

# Create sample data for three years (in thousands of euros)
    data = pd.DataFrame({
    'Ann√©e': [2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
             2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021,
             2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022],
    'Mois': ['Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre',
              'Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre',
              'Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre'],
    'Salaire_Total': [120, 125, 122, 128, 162.5, 135, 138, 140, 145, 150, 152, 193.75,
                     160, 162, 165, 170, 215, 175, 178, 180, 182, 185, 190, 240,
                     195, 200, 202, 205, 260, 210, 212, 215, 220, 225, 230, 290]
    })

    import streamlit as st
    import plotly.express as px

# Create an interactive line chart using Plotly Express
    fig = px.line(data, x='Mois', y='Salaire_Total', color='Ann√©e', title='Suivi de la masse salariale sur 3 ans')
    fig.update_xaxes(title_text='Mois')
    fig.update_yaxes(title_text='Salaires totaux (en k‚Ç¨)')

# Show the plot in Streamlit
    st.plotly_chart(fig)

    # Explanation
    with st.expander("üîÆInterpretation du graphique lin√©aire"):
        st.write("""
    Axe des x (Mois) : L'axe des X repr√©sente les mois de l'ann√©e, fournissant une dimension temporelle pour nos donn√©es.
    
    Axe des y (salaire total) : L'axe des y repr√©sente le total des salaires pay√©s par l'entreprise en milliers d'euros pour chaque mois.
    
    Lignes par ann√©e : le graphique lin√©aire montre trois lignes, chacune d'une couleur diff√©rente, repr√©sentant les ann√©es 2020, 2021 et 2022. Ces lignes relient les points de donn√©es pour chaque mois, nous permettant d'observer les tendances au fil du temps.
    
    Tendances au fil du temps : nous pouvons voir comment les salaires mensuels totaux ont augment√© au cours des trois ann√©es. Ce qui peut √™tre li√© aux effectifs, √† la structure de la masse salariale (effectifs par cat√©gories de salari√©s), √† l‚Äôanciennet√©, √† la l√©gislation, etc...
    
    Mod√®les saisonniers : On observons une saisonnalit√© car les salaires ont tendance √† √™tre bien plus √©lev√©s aux mois de mai et d√©cembre, ce qui peut corrrespondre aux versements de primes (vacances, fin d'ann√©e, etc...)
    """)


    st.markdown("")


    st.markdown("")
    
    
    st.subheader("Donn√©es qualitatives et quantitatives")

    
    st.markdown("")


    st.markdown("")


    st.markdown("- **Nuage de points** : Un nuage de points est un type de visualisation de donn√©es qui montre la relation entre deux variables en pla√ßant des points de donn√©es sur les axes X et Y.")

    st.markdown("**Cas d‚Äôusage** des nuages de points : Ils peuvent √™tre utilis√©s pour analyser la relation entre la satisfaction au travail et l'absent√©isme, le niveau d'exp√©rience et le salaire, les scores de performance des employ√©s et les heures de formation suivies, etc...")


    st.markdown("")
    

    st.markdown("**üèÄApplication 13**")
    st.markdown("Nous souhaitons analyser la relation entre les scores de performance des collaborateurs et les heures de formation suivies. Nous pouvons utiliser un nuage de points avec droite ajust√©e et coefficient R¬≤.")


    import pandas as pd
    import numpy as np

# Create sample data for employee performance and training hours
    np.random.seed(42)

    employee_data = pd.DataFrame({
    'Score_de_Performance': np.random.randint(0, 100, 100),
    'Heures_de_formation_suivies': np.random.randint(0, 50, 100)
    })

    import streamlit as st
    import plotly.express as px

# Create an interactive scatter plot using Plotly Express
    fig = px.scatter(
    employee_data, x='Heures_de_formation_suivies', y='Score_de_Performance',
    title='Scatter Plot des Scores de performance vs. Heures de formation',
    trendline='ols'  # Add a linear regression line
    )
    fig.update_xaxes(title_text='Heures_de_formation_suivies')
    fig.update_yaxes(title_text='Score_de_Performance')

# Show the plot in Streamlit
    st.plotly_chart(fig)

    # Explanation
    with st.expander("üîÆInterpretation du nuage de points"):
        st.write("""
    Axe des x : L'axe des x repr√©sente le nombre d'heures de formation suivies par chaque employ√©.
    
    Axe des y : L'axe des y repr√©sente les scores de performance des employ√©s.
    
    Points de dispersion : chaque point de donn√©es sur le trac√© repr√©sente un employ√©. La position du point indique leurs heures de formation et leur score de performance.
    
    Droite de r√©gression lin√©aire : c'est la ligne la mieux adapt√©e qui d√©crit la relation entre les heures de formation et les scores de performance. Elle peut nous aider √† identifier les tendances dans les donn√©es.
    
    Coefficient R¬≤ : Il quantifie dans quelle mesure la ligne de r√©gression lin√©aire s'adapte aux donn√©es. Il mesure la force de la relation entre les deux variables.
    
    R¬≤ va de 0 √† 1, o√π :

    1. R¬≤ = 0 : Le mod√®le n'explique aucune variabilit√© de la variable d√©pendante

    2. R¬≤ = 1 : Le mod√®le explique parfaitement la variabilit√© de la variable d√©pendante
 
    Dans notre cas, la valeur R¬≤ est de 0,018599, ce qui est assez faible. Cela sugg√®re que seule une petite fraction (environ 1,86 %) de la variabilit√© des scores de performance peut √™tre expliqu√©e par le nombre d‚Äôheures de formation suivies.
    
    En d‚Äôautres termes, la relation lin√©aire entre les heures de formation et les scores de performance est faible. Cela indique que d'autres facteurs non inclus dans cette analyse peuvent avoir un impact plus important sur les scores de performance.
    """)
    

    st.markdown("")


    def redirect_button(url: str, text: str= None, color="#FD504D"):
        st.markdown(
        f"""
        <a href="{url}" target="_blank">
            <div style="
                display: inline-block;
                padding: 0.5em 1em;
                color: #FFFFFF;
                background-color: {color};
                border-radius: 3px;
                text-decoration: none;">
                {text}
            </div
        </a>
        """,
        unsafe_allow_html=True
        )
    redirect_button("https://cours-stats-rh.streamlit.app/Heatmap_en_bonus", "Suite : Heatmap")
    



        
        
        
        
        
        
